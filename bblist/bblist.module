<?php
	function bblist_xbbcode($op='list',$delta='',$tag=NULL)
	{
		$tags['list']=array('dynamic'=>true,
						'description'=>t("Formats a list of items in the default style."));
		$tags['ol']=array('dynamic'=>true,
						'description'=>t("Formats a numbered list of items."));
		$tags['ul']=array('dynamic'=>true,
						'description'=>t("Formats a non-numbered list of items."));	
		switch ($op)
		{
			case 'list': return array_keys($tags);
			case 'info': return $tags[$delta];
			case 'render': return bblist_render($delta,$tag->option,$tag->content);
		}
	}
	
	function bblist_render($type,$style,$content)
	{
		if ($type=='list') $type=variable_get('bblist_default_type','ul');
		global $bblist_styles;
		$content=bblist_armor_nested($content);
		$items = bblist_split_items($content);
		//var_dump($items);
		$tag=$bblist_styles[$type][$style]['ordered']?'ol':'ul';
		//$out="<$tag class="$type-$style">\n<li>".implode("</li>\n<li>",$items)."</li>\n</$tag>";
		$class=$bblist_styles[$type][$style];
		$out = bblist_render_recursive($tag,$class,$items);
		$out = preg_replace('/\[(\*+)--\]/','[$1]',$out);
		//var_dump($out);
		return $out;
	}
	
	function bblist_armor_nested($text)
	{
		$text=preg_replace('/(\[list\])(.*?)(\[\/list\])(.*?)*/ie','bblist_armor_nested_("$1","$2","$3",$4")',$text);
		$text=preg_replace('/(\[ol\])(.*?)(\[\/ol\])(.*?)*/ie','bblist_armor_nested_("$1","$2","$3","$4")',$text);
		$text=preg_replace('/(\[ul\])(.*?)(\[\/ul\])(.*?)*/ie','bblist_armor_nested_("$1","$2","$3","$4")',$text);
		return $text;
	}
	
	function bblist_armor_nested_($open,$items,$close,$rest)
	{
		return $open.preg_replace('/\[(\*+)\]/','[$1--]',$items).$close.$rest;
	}

	function bblist_split_items($text,$level=1)
	{
		$items=preg_split('/\[\*{'.$level.','.$level.'}\]/',$text);
		foreach($items as &$item) $item=trim($item);
		if (count($items)>1) $parent=array_shift($items);
		//var_dump($items);
		foreach ($items as &$item)
		{
			if (preg_match('/\[\*{'.($level+1).','.($level+1).'}\]/',$item)) $item=bblist_split_items($item,$level+1);
		}
		$items['#parent']=$parent;
		//var_dump($items);
		return $items;
	}
	
	function bblist_render_recursive($tag,$classes,$items)
	{
		$class=is_array($classes)?array_shift($classes):$classes;
		if (!$classes) $classes=$class;
		$out="<$tag class='$class'>";
		unset($items['#parent']);
		foreach ($items as $item)
		{
			if (is_array($item)) 
			{
			  $item=$item['#parent'].bblist_render_recursive($tag,$classes,$item);
			}
			$out.="<li>$item</li>"; 
		}
		$out.="</$tag>";
		return $out;
	}
	
	function bblist_init()
	{
		global $bblist_styles;
		$bblist_styles['ol']['hierarchy']=preg_split('/ *, */',variable_get('xbbcode_lists_ol_hierarchy','numeric, lower-alpha, lower-roman'));
		$bblist_styles['ol']['sectioned']='sectioned';
		$bblist_styles['ol']['default']=$bblist_styles['ol'][variable_get('xbbcode_lists_ol_default','hierarchy')];		
		drupal_add_css(drupal_get_path('module','bblist')."/bblist.css");
	}
	
	
	function bblist_menu($maycache)
	{
		if ($maycache) return;
		
		$menu[]=array(
			'path'=>'admin/settings/xbbcode/lists/autocomplete',
			'title'=>t("list-style-type autocomplete"),
			'callback'=>'bblist_autocomplete',
			'access'=>user_access('administer site settings'),
			'type'=>MENU_CALLBACK
		);

		$menu[]=array(
			'path'=>'admin/settings/xbbcode/lists',
			'title'=>t("List style settings"),
			'callback'=>'drupal_get_form',
			'callback arguments'=>'bblist_admin_settings',
			'access'=>user_access('administer site settings'),
			'type'=>MENU_NORMAL_ITEM
		);


		return $menu;
	} 
	
	function bblist_admin_settings()
	{
		$form=array();
		$form['#tree']=true;
		$form['default']=array(
			'#type'=>'radios',
			'#title'=>t("Default list type"),
			'#description'=>t("Choose whether [list] is numbered or non-numbered by default. Users can override the default by using [ul] or [ol]."),
			'#options'=>array('ol'=>t("Numbered"),'ul'=>t("Non-numbered")),
			'#default_value'=>variable_get('xbbcode_lists_default','ul'),
		);
		$form['ol']=array(
			'#type'=>'fieldset',
			'#title'=>t("Ordered list settings"),
			'#collapsible'=>true,
			'#collapsed'=>true,
			'#description'=>t("Configure how to display lists with numbered items.")
		);
		$form['ul']=array(
			'#type'=>'fieldset',
			'#title'=>t("Unordered list settings"),
			'#collapsible'=>true,
			'#collapsed'=>true,
			'#description'=>t("Configure how to display lists with numbered items.")
		);
		
		$form['ol']['default']=array(
			'#type'=>'radios',
			'#title'=>t("Ordered list default"),
			'#description'=>t("Ordered lists will look like this by default. The style can be overridden with [ol=dotted] and [ol=levels]"),
			'#options'=>array(
					'sectioned'=>t("Sectioned: <br />" .
								"<ol class='sectioned'>" .
								"  <li>Level 1" .
								"    <ol class='sectioned'>" .
								"      <li>Level 2" .
								"        <ol class='sectioned'>" .
								"          <li>Level 3</li>" .
								"          <li>Level 3, 2</li>" .
								"        </ol>" .
								"      </li>" .
								"    </ol>" .
								"  </li>" .
								"</ol>" .
								"<strong>Sectioned lists require a browser with CSS 2.0 support.</strong>"),
					'hierarchy'=>t("Levels: <br />" .
								"<ol class='numeric'>" .
								"  <li>Level 1" .
								"    <ol class='lower-alpha'>" .
								"      <li>Level 2" .
								"        <ol class='lower-roman'>" .
								"          <li>Level 3</li>" .
								"          <li>Level 3, 2</li>" .
								"        </ol>" .
								"      </li>" .
								"    </ol>" .
								"  </li>" .
								"</ol>")
				),
			'#default_value'=>variable_get('xbbcode_lists_ol_default','hierarchy'),
		);
		
		$form['ol']['hierarchy']=array(
			'#type'=>'textfield',
			'#title'=>t("Style hierarchy"),
			'#description'=>t("Enter a comma-separated list of styles that will be used by nested lists. Valid styles are: upper-roman, lower-roman, numeric, upper-alpha, lower-alpha, none. Deeper levels will repeat the lowest level."),
			'#default_value'=>variable_get('xbbcode_lists_ol_hierarchy','numeric, lower-alpha, lower-roman'),
			'#autocomplete_path'=>'admin/settings/xbbcode/lists/autocomplete/ol'
		);
		
		

		return system_settings_form($form);
	}
	
	function bblist_admin_settings_validate($form_id,$values)
	{
		$valid_styles=array('upper-alpha','lower-alpha','upper-roman','lower-roman','numeric');
		$types=preg_split('/ *, */',$values['ol']['hierarchy']);
		foreach ($types as $type)
		{
			if (!in_array($type,$valid_styles))
			{
				form_set_error('hierarchy',t("%type is not a valid style.",array('%type'=>$type)));
			}
		}
	}
	
	function bblist_admin_settings_submit($form_id,$values)
	{
		variable_set('xbbcode_lists_default',$values['default']);
		variable_set('xbbcode_lists_ol_default',$values['ol']['default']);
		variable_set('xbbcode_lists_ol_hierarchy',$values['ol']['hierarchy']);
	}

	function bblist_autocomplete($type,$string)
	{
		if ($type=='ol') $styles=array('upper-alpha','lower-alpha','upper-roman','lower-roman','numeric');
		else $styles=array();
		$string=check_plain($string);
		foreach ($styles as $style)
		{
			if (preg_match("/^$string/",$style)) $results[$style]=$style;
		}
		print drupal_to_js($results);
		exit;
	}
?>
