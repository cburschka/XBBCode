<?php
// $Id$


/**
 * @file
 * Installation actions and database schema.
 */

/**
 * Implements hook_schema().
 */
function xbbcode_schema() {
  $schema['xbbcode_custom_tag'] = array(
    'description' => 'Custom tags created manually',
    'fields' => array(
      // Key
      'name' => array(
        'description' => 'Identifies the tag, and serves also to recognize it in text',
        'type' => 'varchar',
        'not null' => TRUE,
        'length' => 32,
      ),
      // Data
      'replacewith' => array(
        'description' => 'The code that this tag should be replaced with when filtering',
        'type' => 'text',
        'size' => 'normal',
        'not null' => TRUE,
      ),
      'description' => array(
        'description' => 'Describes the use of this tag for the help text',
        'type' => 'text',
        'size' => 'normal',
        'not null' => TRUE,
      ),
      'sample' => array(
        'description' => 'A sample of how this tag is to be used',
        'type' => 'text',
        'size' => 'normal',
        'not null' => TRUE,
      ),
      // Options
      'dynamic' => array(
        'description' => 'Whether this code should be evaluated as PHP rather than HTML',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      ),
      'selfclosing' => array(
        'description' => 'Whether the tag requires a closing tag or not',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      ),
      'multiarg' => array(
        'description' => 'Whether the tag accepts multiple named attributes rather than a single option string',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('name'),
  );

  $schema['xbbcode_handler'] = array(
    'description' => 'The module that each tag will be handled by, per-format',
    'fields' => array(
      // Key
      'name' => array(
        'description' => 'Identifies the tag, and serves also to recognize it in text',
        'type' => 'varchar',
        'not null' => TRUE,
        'length' => 32,
      ),
      'format' => array(
        'description' => 'Format ID - distinguishes the different format settings. -1 for global settings.',
        'type' => 'int',
        'size' => 'small',
        'not null' => TRUE,
      ),
      // Options
      'module' => array(
        'description' => 'The system name of the module that handles this tag',
        'type' => 'varchar',
        'not null' => TRUE,
        'length' => 32,
      ),
      'weight' => array(
        'description' => 'Tags are prioritized by weight, then by name',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
      ),
      'enabled' => array(
        'description' => 'Whether this tag is currently enabled',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('name', 'format'),
  );

  return $schema;
}

/**
 * Implements hook_install().
 */
function xbbcode_enable() {
  if (!$bbcode_format = variable_get('xbbcode_auto_format', 0)) {
    $bbcode_format = (object)array(
      'name' => 'BBCode',
      'weight' => -10,
      'filters' => array(
        'filter_html_escape' => array(
          'weight' => 0,
          'status' => 1,
        ),
        'xbbcode' => array(
          'weight' => 1,
          'status' => 1,
        ),
        'filter_autop' => array(
          'weight' => 2,
          'status' => 1,
        ),
      ),
    );
    filter_format_save($bbcode_format);
    foreach (filter_formats() as $format) {
      if ($format->name == 'BBCode') {
        $bbcode_saved = $format;
        variable_set('xbbcode_auto_format', $format->format);
      }
    }
  
    $permission = filter_permission_name($bbcode_format);
    user_role_grant_permissions(DRUPAL_ANONYMOUS_RID, array($permission));
    user_role_grant_permissions(DRUPAL_AUTHENTICATED_RID, array($permission));
    drupal_set_message(t('A <a href="@url">BBCode</a> text format has been created. All users have access to it.', array('@url' => url('admin/config/content/formats/' . $bbcode_saved->format))));
  }
  else {
    $bbcode_format = filter_format_load($bbcode_format);
    debug($bbcode_format);
    $bbcode->filters['xbbcode'] = array(
      'weight' => 2,
      'status' => 1,
    );
    filter_format_save($bbcode);
    drupal_set_message(t('The extensible BBCode filter has been enabled for the <a href="@url">BBCode</a> text format.', array('@url' => url('admin/config/content/formats/' . $bbcode->format))));
    
  }
}

/**
 * Implements hook_disable().
 */
function xbbcode_disable() {
  $bbcode = variable_get('xbbcode_auto_format', 0);
  if ($bbcode) {
    $bbcode = filter_format_load($bbcode);
    $bbcode->filters['xbbcode']['status'] = 0;
    filter_format_save($bbcode);
    drupal_set_message(t('The extensible BBCode filter has been removed from the <a href="@url">BBCode</a> text format.', array('@url' => url('admin/config/content/formats/' . $bbcode->format))), 'warning');
  }
}

/**
 * Implements hook_uninstall().
 */
function xbbcode_uninstall() {
  $format = variable_get('xbbcode_auto_format', 0);
  if ($format) {
    $format = filter_format_load($format);
    filter_format_delete($format);
  }
  variable_del('xbbcode_auto_format');
  drupal_set_message(t('The automatically generated BBCode format has been deleted.'), 'warning');
}

/**
 * #1: Create a handlers table.
 */
function xbbcode_update_1() {
  // Add table xbbcode_handlers
  $sql = '
  CREATE TABLE 
    {xbbcode_handlers}
    (
      name VARCHAR(32),
      format INT(4) NOT NULL DEFAULT -1,
      module VARCHAR(32),
      weight INT(2) NOT NULL DEFAULT 0,
      enabled BOOLEAN NOT NULL DEFAULT TRUE,
      PRIMARY KEY (name,format)
    );';
  $ret[] = update_sql($sql);
  drupal_set_message(t("Table {xbbcode_handlers} created."), 'status');
  return $ret;
}

/**
 * #2: Rename table tags to custom_tags.
 */
function xbbcode_update_2() {
  // Rename table xbbcode_tags to xbbcode_custom_tags
  $ret[] = update_sql("ALTER TABLE {xbbcode_tags} RENAME {xbbcode_custom_tags};");
  return $ret;
}

/**
 * #3: Rename the dependent sub-modules to create an xbbcode namespace.
 */
function xbbcode_update_3() {
  $ret[] = update_sql("UPDATE {xbbcode_handlers} SET module='xbbcode_highlighter' WHERE module='highlighter';");
  $ret[] = update_sql("UPDATE {xbbcode_handlers} SET module='xbbcode_basic' WHERE module='basicbb';");
  $ret[] = update_sql("UPDATE {xbbcode_handlers} SET module='xbbcode_list' WHERE module='bblist';");
  return $ret;
}

/**
 * #6000: Use 0 as the global format, instead of -1.
 */
function xbbcode_update_6000() {
  $ret[] = update_sql('UPDATE {xbbcode_handlers} SET format = 0 WHERE format = -1');
}

/**
 * #7000: Rename tables to singular form.
 */
function xbbcode_update_7000() {
  $return = array();
  db_rename_table($return, 'xbbcode_handlers', 'xbbcode_handler');
  db_rename_table($return, 'xbbcode_custom_tags', 'xbbcode_custom_tag');
}

/**
 * #7001: Store the BBCode format in a variable.
 */
function xbbcode_update_7001() {
  foreach (filter_formats() as $format) {
    if ($format->name == 'BBCode') {
      variable_set('xbbcode_auto_format', $format->format);
      $found = TRUE;
    }
  }
  if (!isset($found)) {
    xbbcode_install();
  }
}
