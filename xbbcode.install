<?php
// $Id$


/**
 * @file
 * Installation actions and database schema.
 */

/**
 * Implements hook_schema().
 */
function xbbcode_schema() {
  $schema['xbbcode_custom_tag'] = array(
    'description' => 'Custom tags created manually',
    'fields' => array(
      // Key
      'name' => array(
        'description' => 'Identifies the tag, and serves also to recognize it in text',
        'type' => 'varchar',
        'not null' => TRUE,
        'length' => 32,
      ),
      // Data
      'markup' => array(
        'description' => 'The markup that this tag should be replaced with when filtering',
        'type' => 'text',
        'size' => 'normal',
        'not null' => TRUE,
      ),
      'description' => array(
        'description' => 'Describes the use of this tag for the help text',
        'type' => 'text',
        'size' => 'normal',
        'not null' => TRUE,
      ),
      'sample' => array(
        'description' => 'A sample of how this tag is to be used',
        'type' => 'text',
        'size' => 'normal',
        'not null' => TRUE,
      ),
      // Options
      'options' => array(
        'description' => 'The settings chosen for this tag in serialized form.',
        'type' => 'text',
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('name'),
  );

  $schema['xbbcode_handler'] = array(
    'description' => 'The module that each tag will be handled by, per-format',
    'fields' => array(
      // Key
      'name' => array(
        'description' => 'Identifies the tag, and serves also to recognize it in text',
        'type' => 'varchar',
        'not null' => TRUE,
        'length' => 32,
      ),
      'format' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
        'description' => 'Foreign key: The {filter_format}.format to which the handler settings belong. NULL for the global settings.',
      ),
      // Options
      'module' => array(
        'description' => 'The system name of the module that handles this tag',
        'type' => 'varchar',
        'not null' => TRUE,
        'length' => 32,
      ),
      'enabled' => array(
        'description' => 'Whether this tag is currently enabled',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('name', 'format'),
  );

  return $schema;
}

/**
 * Implements hook_enable().
 */
function xbbcode_enable() {
  $format = (object)array(
    'format' => 'xbbcode',
    'name' => 'BBCode',
    'weight' => -10,
    'filters' => array(
      'filter_html_escape' => array(
        'weight' => 0,
        'status' => 1,
      ),
      'xbbcode' => array(
        'weight' => 1,
        'status' => 1,
      ),
      'filter_autop' => array(
        'weight' => 2,
        'status' => 1,
      ),
    ),
  );
  filter_format_save($format);
  $permission = filter_permission_name($format);
  user_role_grant_permissions(DRUPAL_ANONYMOUS_RID, array($permission));
  user_role_grant_permissions(DRUPAL_AUTHENTICATED_RID, array($permission));
  drupal_set_message(t('A <a href="@url">BBCode</a> text format has been created. All users have access to it.', array('@url' => url('admin/config/content/formats/' . $format->format))));
}

/**
 * Implements hook_disable().
 */
function xbbcode_disable() {
  filter_format_disable($bbcode);
  drupal_set_message(t('The <a href="@url">BBCode</a> text format has been disabled.', array('@url' => url('admin/config/content/formats/' . $bbcode->format))), 'warning');
}

/**
 * Create a handlers table.
 */
function xbbcode_update_1() {
  // Add table xbbcode_handlers
  $sql = '
  CREATE TABLE 
    {xbbcode_handlers}
    (
      name VARCHAR(32),
      format INT(4) NOT NULL DEFAULT -1,
      module VARCHAR(32),
      weight INT(2) NOT NULL DEFAULT 0,
      enabled BOOLEAN NOT NULL DEFAULT TRUE,
      PRIMARY KEY (name,format)
    );';
  $ret[] = update_sql($sql);
  drupal_set_message(t("Table {xbbcode_handlers} created."), 'status');
  return $ret;
}

/**
 * Rename table tags to custom_tags.
 */
function xbbcode_update_2() {
  // Rename table xbbcode_tags to xbbcode_custom_tags
  $ret[] = update_sql("ALTER TABLE {xbbcode_tags} RENAME {xbbcode_custom_tags};");
  return $ret;
}

/**
 * Rename the dependent sub-modules to create an xbbcode namespace.
 */
function xbbcode_update_3() {
  $ret[] = update_sql("UPDATE {xbbcode_handlers} SET module='xbbcode_highlighter' WHERE module='highlighter';");
  $ret[] = update_sql("UPDATE {xbbcode_handlers} SET module='xbbcode_basic' WHERE module='basicbb';");
  $ret[] = update_sql("UPDATE {xbbcode_handlers} SET module='xbbcode_list' WHERE module='bblist';");
  return $ret;
}

/**
 * Use 0 as the global format, instead of -1.
 */
function xbbcode_update_6000() {
  $ret[] = update_sql('UPDATE {xbbcode_handlers} SET format = 0 WHERE format = -1');
}

/**
 * Rename tables to singular form.
 */
function xbbcode_update_7000() {
  db_rename_table('xbbcode_handlers', 'xbbcode_handler');
  db_rename_table('xbbcode_custom_tags', 'xbbcode_custom_tag');
}

/**
 * Store the BBCode format in a variable.
 */
function xbbcode_update_7001() {
  foreach (filter_formats() as $format) {
    if ($format->name == 'BBCode') {
      variable_set('xbbcode_auto_format', $format->format);
      $found = TRUE;
    }
  }
  if (!isset($found)) {
    xbbcode_install();
  }
}

/**
 * Rename the replacewith column to markup.
 */
function xbbcode_update_7002() {
  db_change_field('xbbcode_custom_tag', 'replacewith', 'markup', array(
    'description' => 'The markup that this tag should be replaced with when filtering',
    'type' => 'text',
    'size' => 'normal',
    'not null' => TRUE,
  ));
}

/**
 * Remove the weight column.
 */
function xbbcode_update_7003() {
  db_drop_field('xbbcode_handler', 'weight');
}

/**
 * Reduce custom tag options to serialized array form.
 */
function xbbcode_update_7104() {
  db_add_field('xbbcode_custom_tag', 'options', array(
    'description' => 'The settings chosen for this tag in serialized form.',
    'type' => 'text',
    'not null' => TRUE,
    'default' => '',
  ));

  $result = db_query('SELECT * FROM {xbbcode_custom_tag}');
  while ($row = $result->fetch()) {
    $options = serialize(array(
      'selfclosing' => $row->selfclosing,
      'eval' => $row->dynamic,
    ));
    db_update('xbbcode_custom_tag')->fields(array(
      'options' => $options,
    ))->condition('name', "{$row->name}")->execute();
  }
  
  db_drop_field('xbbcode_custom_tag', 'dynamic');
  db_drop_field('xbbcode_custom_tag', 'selfclosing');
  db_drop_field('xbbcode_custom_tag', 'multiarg');
}

/**
 * Change Format IDs from integers to strings, see Drupal issue #934050.
 */
function xbbcode_update_7105() {
  db_change_field('filter_format', 'format', 'format', array(
    'type' => 'varchar',
    'length' => 255,
    'not null' => FALSE,
    'description' => 'Foreign key: The {filter_format}.format to which the handler settings belong. NULL for the global settings.',
  ));
}
