<?php
// $Id$

/**
 * @file
 * The main module file containing hook implementations.
 */

require_once 'xbbcode.crud.inc';   // Database interface

/**
 * Implements hook_menu().
 */
function xbbcode_menu() {
  xbbcode_rebuild_handlers();
  
  $menu['admin/config/xbbcode/settings'] = array(
    'title' => 'Handlers',
    'description' => 'Enable or disable tags and choose the module that handles them.',
    'page callback' => 'drupal_get_form',
    'type' => MENU_LOCAL_TASK,
    'page arguments' => array('xbbcode_settings_handlers'),
    'access arguments' => array('administer site configuration'),
    'file' => 'xbbcode.admin.inc',
  );
  
  $menu['admin/config/xbbcode/tags'] = array(
    'title' => 'Custom Tags',
    'description' => 'Add or modify your own tags',
    'page callback' => 'drupal_get_form',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'page arguments' => array('xbbcode_custom_tags'),
    'access arguments' => array('administer site configuration'),
    'file' => 'xbbcode.admin.inc',
  );
  
  $menu['admin/config/xbbcode'] = array(
    'title' => 'XBBCode',
    'description' => 'Add or modify your own tags',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('xbbcode_custom_tags'),
    'access arguments' => array('administer site configuration'),
    'file' => 'xbbcode.admin.inc',
  );
  
  $menu['admin/config/xbbcode/tags/%/edit'] = array(
    'type' => MENU_CALLBACK,
    'title' => 'Editing tag',
    'description' => 'Edit a custom tag',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('xbbcode_custom_tags', 4),
    'file' => 'xbbcode.admin.inc',
    'access arguments' => array('administer site configuration'),
  );
  return $menu;
}

/**
 * Implements hook_filter_info().
 */
function xbbcode_filter_info() {
  $filters['xbbcode'] = array(
    'title' => t('Extensible BBCode processor'),
    'description' => t('Renders standard and custom BBCode tags into HTML code.'),
    'process callback' => 'xbbcode_filter_process',
    'settings callback' => 'xbbcode_filter_settings',
    'tips callback' => 'xbbcode_filter_tips',
  );
  return $filters;
}

function xbbcode_filter_process($text, $filter, $format) {
  module_load_include('inc', 'xbbcode');
  $filter = _xbbcode_build_filter($format->format);
  return $filter->process($text);
}

function xbbcode_filter_settings($form, &$form_state, $filter, $defaults, $format) {
  module_load_include('inc', 'xbbcode', 'xbbcode.crud');
  $specific = xbbcode_format_is_specific();

  $form['xbbcode'] = array(
    '#type' => 'fieldset',
    '#title' => t('XBBCode'),
    '#collapsible' => TRUE, 
  );

  $form['xbbcode']["xbbcode_filter_{$format}_autoclose"] = array(
    '#type' => 'checkbox',
    '#title' => t("Automatically close tags left open at the end of the text."),
    '#description' => t("You will need to enable this option if you use automatic teasers on your site. BBCode will never generate broken HTML, but otherwise the BBCode tags broken by the teaser will simply not be processed."),
    '#default_value' => variable_get('xbbcode_filter_'. $format .'_autoclose', false),
  );

  $form['xbbcode']['override'] = array(
    '#type' => 'radios',
    '#title' => t('Override global settings'),
    '#options' => array(
      'global' => t('Use global settings (specific settings will be lost).'),
      'specific' => t('Use specific settings for this format.'),
    ),
    '#default_value' => $override,
    '#description' => t('Overriding the global settings allows you to disallow or allow certain special tags for this format, while other formats will not be affected by the change.'),
  );

  module_load_include('inc', 'xbbcode', 'xbbcode.admin');
  $form['xbbcode']['tags'] = xbbcode_settings_handlers_form($format);
  $form['xbbcode']['tags']['tags']['#collapsed'] = $override == 'global';
  $form['#submit'][] = 'xbbcode_settings_handlers_submit';

  return $form;
}

function xbbcode_filter_tips($filter, $format, $long) {
  module_load_include('inc', 'xbbcode');
  $filter = _xbbcode_build_filter($format->format);
  if (!$filter->tags) return t('BBCode is enabled, but no tags are defined.');
  
  if ($long) {
    $out .= '<ul>';
    foreach ($filter->tags as $name => $tag) {
      $out .= "<li><strong>[$name]</strong><br /></br />";
      $out .= $tag->info->description . '<br />';
      $out .= '<object><div class="codeblock">' . $tag->info->sample . '</div></object>';
      $out .= '<div style="display:block;padding:10px;">';
      $out .= $filter->process($tag->info->sample);
      $out .= '</div></li>';
    }
    $out .= '</ul>';
    return $out;
  } 
  else {
    foreach ($filter->tags as $name => $tag) {
      $tags[$name] = '<abbr title="' . $tag->info->description . ' ' . $tag->info->sample . '">[' . $name . ']</abbr>';
    }
    return t('You may use these tags: !tags', array('!tags' => implode(', ', $tags)));
  }
}

/**
 * Implements hook_help().
 */
function xbbcode_help($section) {
  if ($section != 'admin/help#modulename') return;
	return t(<<<EOF
<p>How to write the replacement value for a new custom XBBCode tag:</p>

<h3>Static text:</h3>

<p>Simply enter the HTML code that should replace [tag=option]content[/tag]. The following variables are available to you:</p> 

<ul>
  <li>{option} will be replaced with the value of 'option' in the above example</li>
  <li>{content} will be replaced with the text between the text.</li>
</ul>

<h3>Multiple arguments:</h3>
<p>Your tag can take advantage of multiple arguments that can be provided in the form of [tag arg1=value1 arg2='value 2']content[/tag].
In this example, you will have access to these variables:</p>

<ul>
  <li>{arg1} will be replaced with val1,</li>
  <li>{arg2} will be replaced with val2,</li>
  <li>{content} remains the same.</li>
</ul>

<h3>PHP Code</h3>
<p>Enter the PHP code (including &lt;?php ?&gt;) that should be executed. Variables are 'filtered' into the code as literal strings prior to execution, so they should be wrapped in quotes and assigned to variables. Code outside code tags will be printed literally.</p>
<p>As an example, [php=Label for this Code]Some PHP Code[/php] might be replaced by this code:</p>
<code>
  &lt;label&gt;{option}&lt;/label&gt;
  &lt;code&gt;
  &lt;?=highlight_string("{content}")?&gt;
  &lt;/code&gt;
</code>
<p>You may return your replacement code by printing it or using return.</p>
EOF
  );
}

/**
 * Implements hook_xbbcode().
 */
function xbbcode_xbbcode($op = 'list', $delta = NULL, $tag = NULL) {
  switch ($op) {
    case 'list':
      return xbbcode_custom_tag_names();
      
    case 'info':
      return xbbcode_custom_tag_load($delta);
       
    case 'render':
      return xbbcode_xbbcode_render($delta, $tag->args, $tag->content);
  }
}

function xbbcode_xbbcode_render($tag_name, $args, $content) {
  $code = xbbcode_custom_tag_load($tag_name);
  if (is_array($args)) {
    $replace = array_keys($args);
    $with = array_values($args);
    foreach ($replace as $i => $name) {
      $replace[$i] = '{'. $name .'}';
      $with[$i] = addslashes($with[$i]);
    }
  }
  else {
    $replace = array('{option}');
    $with = array(addslashes($args));
  }
  
  $replace[] = '{content}';
  $with[] = addslashes($content);
  $code = str_replace($replace, $with, $code->replacewith);
      
  ob_start();
  print eval('?>' . $code);
  $output = ob_get_contents();
  ob_end_clean();
  return $output;
}

function xbbcode_rebuild_handlers() {
  $settings[0] = xbbcode_handlers_load(0, TRUE);
  foreach (array_keys(xbbcode_formats('specific')) as $format) {
    $settings[$format] = xbbcode_handlers_load($format, TRUE);
  }
  
  foreach (module_implements('xbbcode') as $module) {
    foreach (module_invoke($module, 'xbbcode', 'list') as $tag) {
      $providers[$tag][$module] = $module;
    }
  }
  
  $delete = $update = $create = array();
  
  // Remove or update broken handlers.
  foreach ($settings as $format => $handlers) {
    foreach ($handlers as $tag => $handler) {
      if (!isset($providers[$tag])) {
        // If no module provides a particular tag, delete it.
        $delete[$tag] = $tag;
      }
      elseif (!isset($providers[$tag][$handler->module])) {
        // If other modules still provide a particular tag, pick one of them.
        $update[$format][$tag] = current($providers[$tag]);
      }
    }
  }
  
  // Add new handlers.
  $created = array();
  foreach ($providers as $tag => $modules) {
    foreach ($settings as $format => $handlers) {
      if (!isset($handlers[$tag])) {
        // If the module has no handler set for this tag, add one of the providers.
        $create[$format][$tag] = current($modules);
        foreach ($modules as $module) {
          $created[$module][$tag] = TRUE;
        }
      }
    }
  }
  
  if ($delete) {
    xbbcode_handlers_delete($delete);
    drupal_set_message(format_plural(count($delete), '1 tag was deleted because its handler has disappeared.', '@count tags were deleted because their handlers disappeared.'), 'warning');
  }
  
  $updated = array();
  foreach ($update as $format => $changed) {
    foreach ($changed as $tag => $module) {
      xbbcode_handler_update($format, $tag, $module);
      $updated[$tag] = TRUE;
    }
  }
  if ($updated) {
    drupal_set_message(format_plural(count($updated), '1 tag was updated because its current handler disappeared.', '@count tags were updated because their current handlers disappeared.'), 'warning');
  }

  foreach ($create as $format => $new) {
    foreach ($new as $name => $module) {
      $tag = (object) array(
        'module' => $module,
        'name' => $name,
        'enabled' => 1,
        'weight' => 0,
      );
      xbbcode_handler_save($tag, $format);
    }
  }
  
  foreach ($created as $module => $new) {
    drupal_set_message(format_plural(count($new), '%module added 1 BBCode tag.', '%module added @count BBCode tags.', array('%module' => $module)));
  }

  cache_clear_all('xbbcode', 'cache', TRUE);
}

/**
 * Reset all custom tags.
 */
function xbbcode_rebuild_custom_tags() {
  drupal_static_reset('_xbbcode_custom_tag_load');
}

/**
 * Implements hook_theme().
 */
function xbbcode_theme() {
  return array(
    'xbbcode_settings_handlers_format' => array(
      'render element' => 'fieldset',
    ),
  );
}

