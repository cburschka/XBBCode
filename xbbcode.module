<?php

/**
 * @file
 * The main module file containing hook implementations.
 */

use Drupal\Core\Cache\Cache;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;

/**
 * A pseudo-format for global settings (all real format names are lowercase).
 */
define('XBBCODE_GLOBAL', 'GLOBAL');

/**
 * Regular expression matching any quote delimiter, including escaped quotes.
 */
define('XBBCODE_RE_QUOTE', '"|\'|&(quot|#039);|');

/**
 * Regular expression pattern for parsing a key=value assignment.
 */
define('XBBCODE_RE_ATTR', '(?:\s+(?<key>\w+)=(?<aq>' . XBBCODE_RE_QUOTE . ')(?<value>[^"]*?)\g{aq}(?=\s|\]|$))');

/**
 * Regular expression pattern for parsing a complete tag element.
 */
define('XBBCODE_RE_TAG', '/\[(?<closing>\/)?(?<name>\w+)(?:=(?<bq>' . XBBCODE_RE_QUOTE . ')(?<option>.*?)\g{bq}(?=\s|\])|(?<attrs>' . XBBCODE_RE_ATTR . '+))?\]/i');

/**
 * Implements hook_filter_info().
 */
function xbbcode_filter_info() {
  $filters['xbbcode'] = array(
    'title' => t('Extensible BBCode'),
    'type' => FILTER_TYPE_MARKUP_LANGUAGE,
    'description' => t('Renders standard and custom BBCode tags into HTML code.'),
    'process callback' => 'xbbcode_filter_process',
    'settings callback' => 'xbbcode_filter_settings',
    'tips callback' => 'xbbcode_filter_tips',
    'default settings' => array(
      'autoclose' => FALSE,
      'override' => FALSE,
    ),
  );
  return $filters;
}

/**
 * Processing callback for the xbbcode filter.
 */
function xbbcode_filter_process($text, $filter, $format) {
  module_load_include('inc', 'xbbcode');
  return _xbbcode_build_filter($filter, $format)->process($text);
}

/**
 * Settings callback for the filter settings of xbbcode.
 */
function xbbcode_filter_settings(&$form, &$form_state, $filter, $format, $defaults, $filters) {
  // Load the database and admin interface.
  module_load_include('inc', 'xbbcode', 'xbbcode.crud');
  module_load_include('inc', 'xbbcode', 'xbbcode.admin');

  $settings = array(
    '#type' => 'fieldset',
    '#title' => t('BBCode'),
    '#collapsible' => TRUE,
  );

  $settings['autoclose'] = array(
    '#type' => 'checkbox',
    '#title' => t("Automatically close tags left open at the end of the text."),
    '#description' => t("You will need to enable this option if you use automatic teasers on your site. BBCode will never generate broken HTML, but otherwise the BBCode tags broken by the teaser will simply not be processed."),
    '#default_value' => isset($filter->settings['autoclose']) ? $filter->settings['autoclose'] : $defaults['autoclose'],
  );

  $override = !empty($filter->settings['override']);
  $settings['override'] = array(
    '#type' => 'checkbox',
    '#title' => t('Override the <a href="@url">global settings</a> with specific settings for this format.', array('@url' => url('admin/config/content/xbbcode/settings'))),
    '#default_value' => $override,
    '#description' => t('Overriding the global settings allows you to disallow or allow certain special tags for this format, while other formats will not be affected by the change.'),
    '#attributes' => array(
      'onchange' => 'Drupal.toggleFieldset(jQuery("#edit-filters-xbbcode-settings-tags"))',
    ),
  );

  $settings['tags'] = xbbcode_settings_handlers_format(!empty($format->format) ? $format->format : XBBCODE_GLOBAL);
  $settings['tags']['#collapsed'] = !$override;

  // Make sure to keep the default #submit while adding a new one.
  if (!isset($form['#submit'])) {
    $form['#submit'] = array('filter_admin_format_form_submit');
  }
  $form['#submit'][] = 'xbbcode_settings_handlers_save_submit';

  return $settings;
}

/**
 * Implements hook_help().
 */
function hook_help($route_name, RouteMatchInterface $route_match) {
  if ($route_name == 'help.page.xbbcode') {
    $text = '<p>' . t('How to write the replacement value for a new custom XBBCode tag:') . '</p>';
    $text .= '<h3>' . t('Static text') . '</h3>';
    $text .= '<p>' . t('Enter the HTML code that should replace [tag=hello]world[/tag]. The following variables are available to you.') . '</p>';
    $text .= '<ul>';
    $text .= '<li>' . t('<code>{option}</code> will be replaced with "hello" in the above example.') . '</li>';
    $text .= '<li>' . t('<code>{content}</code> will be replaced with the text "world".') . '</li>';
    $text .= '</ul>';

    $text .= '<h3>' . t('Multiple attributes') . '</h3>';
    $text .= '<p>' . t('Your tag can accept multiple attributes in the form [tag arg1=value1 arg2="value 2"]content[/tag]. In this example, you will have access to the following variables.') . '</p>';
    $text .= '<ul>';
    $text .= '<li>' . t('<code>{arg1}</code> will be replaced with "val1".') . '</li>';
    $text .= '<li>' . t('<code>{arg2}</code> will be replaced with val2.') . '</li>';
    $text .= '<li>' . t('<code>{content}</code> is replaced by "content".') . '</li>';
    $text .= '</ul>';

    $text .= '<h3>' . t('PHP Code') . '</h3>';
    $text .= '<p>' . t('Enter the PHP code (including <code>&lt;?php ?&gt;</code>) that should be executed. The variables <code>$tag->content</code> and <code>$tag->option</code> contain the tag content and option; <code>$tag->attr(\'name\')</code> will return the value of the "name" attribute.') . '</p>';
    $text .= '<p>' . t('As an example, [php=Label for this Code]Some PHP Code[/php] might be replaced by this code:') . '</p>';
    $text .= <<<END
    <div class="codeblock">
      &lt;label&gt;\$tag->option&lt;/label&gt;
      &lt;code&gt;
        &lt;?=highlight_string(\$tag->content)?&gt;
      &lt;/code&gt;
    </div>
END;
    $text .= '<p>' . t('You may return your output by printing it or using return.') . '</p>';
    return $text;
  }
}

/**
 * Implements hook_xbbcode_info().
 */
function xbbcode_xbbcode_info() {
  // Load the database interface.
  module_load_include('inc', 'xbbcode', 'xbbcode.crud');
  $custom_tags = xbbcode_custom_tag_load();
  $tags = array();
  foreach ($custom_tags as $name => $tag) {
    $tags[$name] = array(
      'description' => $tag->description,
      'sample' => $tag->sample,
      'markup' => !$tag->options['php'] ? $tag->markup : NULL,
      'callback' => $tag->options['php'] ? '_xbbcode_custom_eval' : NULL,
      'options' => $tag->options,
    );
  }
  return $tags;
}

/**
 * Rendering callback for dynamic custom tags (PHP evaluated).
 */
function _xbbcode_custom_eval($tag_data, $xbbcode_filter) {
  if (module_exists('php')) {
    global $tag;
    $tag = $tag_data;
    module_load_include('inc', 'xbbcode', 'xbbcode.crud');

    // Insert the $tag variable into the evaluated code's scope.
    $code = '<?php global $tag; ?>' . xbbcode_custom_tag_load($tag->name)->markup;
    $output = php_eval($code);
    unset($tag);
    return $output;
  }
}

/**
 * Reset all cached tags.
 */
function xbbcode_rebuild_tags($format_id = NULL) {
  if ($format_id != NULL) {
    Drupal::cache()->invalidate("xbbcode_tags:$format_id");
  }
  else {
    Cache::invalidateTags(['xbbcode_tags']);
  }
}

/**
 * Implements hook_theme().
 */
function xbbcode_theme() {
  return array(
    'xbbcode_settings_handlers_format' => array(
      'render element' => 'fieldset',
      'file' => 'xbbcode.admin.inc',
      'function' => 'theme_xbbcode_settings_handlers_format',
    ),
  );
}

function xbbcode_settings_handlers_process(&$element, FormStateInterface $form_state, &$complete_form) {
  foreach ($element['#options'] as $key => $value) {
    // Remove checkbox values:
    $element[$key]['#default_value'] = $element[$key]['#default_value'] == $element[$key]['#return_value'];
    unset($element[$key]['#return_value']);
    // Move checkboxes to 'enabled' subkey.
    $element[$key] = ['enabled' => $element[$key]];
  }
  return $element;
}
